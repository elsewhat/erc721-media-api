openapi: 3.0.1
info:
  title: 'ERC721 Media API'
  description: |
    # Introduction
    The ERC721 Media API provides a standardized approach for allowing third party access to media files for ERC721 NFTs if the owner gives permission. 
    
    Example of media files are:  
    1. Rigged 3D models in VRM, FBX and GLB formats to be used in open worlds such as Cryptovoxels, Sandbox, Decentraland or Somnium
    1. 2D sprite sheets to use in 2D based worlds such as worldwideweb3
    
    The media files in question are *not* stored on the blockchain, but are securely stored as part at the website of the ERC721 contract owner. An ERC721 contract owner can implement this API to provide third party access to the media files. 
    
    # Requesting owner permission
    At a high-level, a third party application would like to access media files on behalf of the NFT owner. To prove the ownership the NFT owner must sign a message using web3 at the website of the ERC721 contract owner. This will trigger a redirect to a callback URI defined by the third party application and include the necessary access token to access the media files for a limited time period.
    
    The overall authentication flow is inspired by the [OAuth Authorization Code Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1), but is simpler (`access_token` returned in initial `callbackURI`).
    
    The first step is the endpoint [`/authorize`](#operation/GetAuthorizeURI) which initialize the flow from the third party application. The third party application must provide a `callbackURI` and is recommended to provide a `state` parameter for preventing cross-site request forgery attacks.
    
    The results of the first step is a `HTTP 302 redirect` to a URI at the website of the ERC721 contract owner. This redirect includes the `callbackURI` and `state` from the third party application. 
    
    By following the redirect, the NFT owner will need to sign a message using web3 to prove ownership. 
    If the authentication through web3 signature was completed successfully, the callback URL will be triggered with three parameters:  
    ```
    account: The account address that approved access.
    access-token: The token that grants access to the owner files.
    state (optional): Optional state parameter which should be compared with  in order to protect against cross-site request forgery
    ```
    
    If authentication was not successful, for example the user cancelled the request,  the callback URL will be triggered with a single parameter:  
    ```
    error_message: The message describing the error that occured, or that the user declined access.
    ```
    
    # Get available media files
    Available media files are found through [`/nfts`](#operation/GetNFTSByWallet). This endpoint may require a valid `access-token`.
    
    # Download media file
    Media files are downloaded from [`/nfts/{nft-id}/media/{media-id}`](#operation/DownloadMediaForNFT). This endpoint will always required a valid `access-token`.
    
  version: "0.1.0"

  contact:
    name: Contact via github issues
    url: https://github.com/elsewhat/nft-erc721-media-api
  
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/

  x-logo:
    url: 'https://elsewhat.github.io/nft-erc721-media-api/img/logo.png'
    altText: Logo
  
externalDocs:
  description: API documentation
  url: 'https://elsewhat.github.io/nft-erc721-media-api'
  
servers:
  - url: https://meebits.larvalabs.com/api/v1/
    description: |
      NFT collection #1 (contract 0x12345)
  - url: https://api.bayc.com/api/v1/
    description: |
      NFT collection #2 (contract 0x56789)  

security:
  - bearerAuth: [ ]
  - apiKey: [ ]

tags:
  - name: NFTs
  - name: Authorize
  - name: Media  

x-tagGroups:
  - name: Authentication
    tags:
      - Authorize  
  - name: Content
    tags:
      - NFTs
      - Media

paths:
  /authorize:
    get:
      operationId: GetAuthorizeURI
      summary: Redirect to authorize URI
      description: |
        ### Overview
        Initiate the authorization flow where the NFT owner must sign a message using web3 on the website for the ERC721 collection owner. 
        
        A successful signature verification will result in a `HTTP 302 redirect` to the provided `callbackURI` which should be part of third party application requiring access to the media file.
        
        ### Important information
        Note: The response of this API call is normally a `HTTP 302 redirect` where the `Location` HTTP header contains the URI the NFT owner must visit in order to prove ownership.
      tags:
        - Authorize
      parameters:
        - in: query
          name: callbackURI
          description: | 
            URI to redirect back to after owner has successfully proved ownership through web3 signature
          required: true
          schema:
            type: string
            example: 'https%3A%2F%2Fmeebits.larvalabs.com%2Fmeebits%2FtestCallback'
        - in: query
          name: state
          description: |
            An opaque value used by the client to maintain state between the request and callback.  The authorization server includes this value when redirecting the user-agent back after owner has successfully proved ownership through web3 signature.  The parameter SHOULD be used for preventing cross-site request forgery attacks and should not be guessable. A GUID or hash of the user session could be used
          required: false
          schema:
            type: string
            example: 73ec3d0a-b206-4840-a493-2c20a8d893bb         
      responses:
        '302':
          description: Request successful and authorize URI is in the `Location` HTTP header
        '503':
          description: Service temporarily not available. Please try again later
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'  

  /nfts:
    get:
      operationId: GetNFTSByWallet
      summary: Get ERC721 Non-Fungible tokens with media by account for this contract
      description: |
        ### Overview
        For a given wallet, get ERC721 Non-Fungible tokens and their media for this single contract. 
        
        The response will contain the standard ERC721 metadata, but also references to additional media files. 
      tags:
        - NFTs
      parameters:
        - in: query
          name: wallet
          description: The ethereum wallet address of the user
          required: true
          schema:
            type: string
            example: '0x1912365cf48b8d0cd9081958e69b7a1708249123'
        - in: query
          name: access-token
          description: Access token from authentication. May not be required for some contracts
          required: false
          schema:
            type: string
            example: 'uuzGVVFwklbyDBFERTxe'
        - in: query
          name: per-page
          description: Results to return pr page
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
        - in: query
          name: page
          description: Page to fetch
          required: false
          schema:
            type: integer
            default: 1            
      responses:
        '200':
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTokens'
          description: Request successful
        default:
          description: Unexpected error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'           

  /nfts/{nft-id}/media/{media-id}:
    get:
      tags:
      - Media
      summary: Download media file for NFT
      operationId: DownloadMediaForNFT
      description: | 
        ### Overview
        Download a media file for an NFT. 
        
        The `nft-id` and `media-id` can be found using [`/nfts`](#operation/GetNFTSByWallet)
        
        ### Important information
        Response `401` will occur if provided `access-token` is expired or not valid. 
        Response `403` will occur if the `access-token` is valid, but does not have authorization to download the media.
      parameters: 
      - name: nft-id
        in: path
        description: |
          `nft-id` from response of `/nfts`
        required: true
        schema:
          type: string
      - name: media-id
        in: path
        description: |
          `media-id` from response of `/nfts`
        required: true
        schema:
          type: string
      - in: query
        name: access-token
        description: Access token from authentication
        required: true
        schema:
          type: string
          example: 'uuzGVVFwklbyDBFERTxe'          
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: |
            `access-token` or other required parameter not provided
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                    
        '401':
          description: |
            `access-token` expired or not valid.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                  
        '403':
          description: |
            No access to `media-id`
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                  
        '404':
          description: |
            `nft-id` or `media-id` could not be found.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'    
        default:
            $ref: '#/components/responses/DefaultResponse' 
   

components:
  schemas:
    ProblemDetails:
          type: object
          properties:
            type:
              type: string
              description: Reference to HTTP status definition
              example: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
              nullable: true
            title:
              type: string
              description: Description of error
              example: 'One or more validation errors occurred.'
              nullable: true
            status:
              type: integer
              description: HTTP status code
              example: 400
              format: int32
              nullable: true
            traceId:
              type: string
              description: Request id to be used for support
              example: '00-d9dc368e6caec4449a64e798dad1b5b2-7d82bdde82c9474a-00'
            errors:
              type: object
              description: Detailed information about error
              additionalProperties:
                type: object
                additionalProperties: false
              nullable: true
              readOnly: true
          additionalProperties: false
          
    Pagination:
      type: object
      properties:
        total_count:
          type: integer
          example: 20
          description: Total number of responses
        incomplete_results:
          type: boolean
          example: false
          description: Are there additional data in other pages
          
    ContractTokens:
      allOf:
        - $ref: '#/components/schemas/Pagination'    
      type: object
      properties:
        nfts:
            type: array
            items:
              $ref: '#/components/schemas/NFT'
              
    NFT:
        type: object
        properties:
          nftId: 
            type: string
            example: '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7-13396'
            description: Unique id of the NFT
          contract:
            type: string
            example: '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'
            description: Contract address
          tokenId:
            type: string
            example: '13396'
            description: Token id in the contract
          owner: 
            $ref: '#/components/schemas/TokenOwner'
          erc721:
            $ref: '#/components/schemas/ERC721'
          media:
            type: array
            items:
              $ref: '#/components/schemas/Media'          
          
    TokenOwner: 
        type: object
        properties:
          address:    
            type: string
            example: '0x1234...'
            description: Wallet address of owner
            
    ERC721: 
        type: object
        description: ERC721 Metadata JSON Schema 
        properties:
          name:    
            type: string
            example: 'Meebit #13396'
            description: Name of ERC721 token
          description:
            type: string
            example: 'Meebit #13396'
          image:
            type: string
            example: 'https://meebits.larvalabs.com/meebitimages/characterimage?index\u003d13386\u0026type\u003dfull\u0026imageType\u003djpg'          
          attributes:
            type: array
            items:
              $ref: '#/components/schemas/ERC721Attribute'
              
    ERC721Attribute:
      type: object
      description: ERC721 attributes
      properties:
        trait_type:
          type: string
          example: Shirt
        value:
          type: string
          example: Hoodie up  
          
    Media:
      type: object
      description: Media available for the owner of the ERC721
      properties:
        mediaId: 
          type: string
          description: | 
            Unique id of the media to be used against the endpoint `/media`
        mediaType: 
          type: string
          description: | 
            Media type as defined by https://www.iana.org/assignments/media-types/media-types.xhtml
            Official media type may not exist for all files types (for example FBX and VRM)
          example: 'model/gltf-binary'
          nullable: true
        mediaFileEnding:
          type: string
          description: File ending for the media which can be used if mediaType is not defined
          example: 'gltf'
